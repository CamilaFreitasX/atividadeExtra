import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from csv_agent import CSVAgent
from data_analyzer import DataAnalyzer
from visualization import DataVisualizer
import os
from io import StringIO
import traceback
import matplotlib
import tempfile

# Configura√ß√µes para produ√ß√£o (Render)
matplotlib.use('Agg')  # Backend n√£o-interativo para matplotlib
os.environ['MPLBACKEND'] = 'Agg'

# Configurar diret√≥rio tempor√°rio para matplotlib
temp_dir = tempfile.mkdtemp()
os.environ['MPLCONFIGDIR'] = temp_dir

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Agente de An√°lise CSV",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .section-header {
        font-size: 1.5rem;
        color: #2e8b57;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .insight-box {
        background-color: #e8f4fd;
        padding: 1rem;
        border-left: 4px solid #1f77b4;
        margin: 1rem 0;
    }
    .conclusion-box {
        background-color: #f0f8e8;
        padding: 1rem;
        border-left: 4px solid #2e8b57;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def initialize_session_state():
    """Inicializa vari√°veis de sess√£o"""
    if 'agent' not in st.session_state:
        st.session_state.agent = None
    if 'df' not in st.session_state:
        st.session_state.df = None
    if 'analysis_history' not in st.session_state:
        st.session_state.analysis_history = []
    if 'insights_generated' not in st.session_state:
        st.session_state.insights_generated = False
    if 'visualization_cache' not in st.session_state:
        st.session_state.visualization_cache = {}

def load_csv_file(uploaded_file):
    """Carrega arquivo CSV"""
    try:
        st.info(f"üîç Processando arquivo: {uploaded_file.name}")
        st.info(f"üìä Tamanho do arquivo: {uploaded_file.size} bytes")
        
        # Ler o arquivo
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
            st.info(f"‚úÖ Arquivo lido com sucesso! Shape: {df.shape}")
            st.info(f"üìã Colunas: {list(df.columns)}")
        else:
            st.error("Por favor, fa√ßa upload de um arquivo CSV.")
            return None
        
        return df
    except Exception as e:
        st.error(f"Erro ao carregar arquivo: {str(e)}")
        st.error(f"Detalhes: {traceback.format_exc()}")
        return None

def display_dataset_overview(df):
    """Exibe vis√£o geral do dataset"""
    st.markdown('<div class="section-header">üìã Vis√£o Geral do Dataset</div>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Linhas", f"{len(df):,}")
    with col2:
        st.metric("Colunas", len(df.columns))
    with col3:
        st.metric("Valores Faltantes", f"{df.isnull().sum().sum():,}")
    with col4:
        st.metric("Tamanho (MB)", f"{df.memory_usage(deep=True).sum() / 1024**2:.2f}")
    
    # Informa√ß√µes das colunas
    st.markdown("**Informa√ß√µes das Colunas:**")
    col_info = pd.DataFrame({
        'Coluna': df.columns,
        'Tipo': df.dtypes.astype(str),
        'Valores √önicos': [df[col].nunique() for col in df.columns],
        'Valores Faltantes': [df[col].isnull().sum() for col in df.columns],
        '% Faltantes': [f"{(df[col].isnull().sum() / len(df)) * 100:.1f}%" for col in df.columns]
    })
    st.dataframe(col_info, use_container_width=True)
    
    # Amostra dos dados
    st.markdown("**Amostra dos Dados:**")
    st.dataframe(df.head(10), use_container_width=True)

def display_automatic_analysis(agent):
    """Exibe an√°lise autom√°tica do dataset"""
    st.markdown('<div class="section-header">üîç An√°lise Autom√°tica</div>', unsafe_allow_html=True)
    
    try:
        overview = agent.get_dataset_overview()
        
        if 'data_quality' in overview:
            quality = overview['data_quality']
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Qualidade dos Dados:**")
                st.metric("Completude dos Dados", f"{quality.get('data_completeness', 0):.1f}%")
                st.metric("Linhas Duplicadas", quality.get('duplicate_rows', 0))
            
            with col2:
                st.markdown("**Distribui√ß√£o de Tipos:**")
                if agent.analyzer:
                    st.metric("Colunas Num√©ricas", len(agent.analyzer.numeric_columns))
                    st.metric("Colunas Categ√≥ricas", len(agent.analyzer.categorical_columns))
        
        # Gerar insights autom√°ticos
        if not st.session_state.insights_generated:
            with st.spinner("Gerando insights autom√°ticos..."):
                insights = agent.generate_insights()
                if insights:
                    st.markdown("**Insights Autom√°ticos:**")
                    for i, insight in enumerate(insights, 1):
                        st.markdown(f'<div class="insight-box"><strong>Insight {i}:</strong> {insight}</div>', 
                                  unsafe_allow_html=True)
                st.session_state.insights_generated = True
    
    except Exception as e:
        st.error(f"Erro na an√°lise autom√°tica: {str(e)}")

def display_visualizations(agent):
    """Exibe visualiza√ß√µes autom√°ticas"""
    st.markdown('<div class="section-header">üìä Visualiza√ß√µes Autom√°ticas</div>', unsafe_allow_html=True)
    
    try:
        if agent.visualizer:
            # Vis√£o geral do dashboard
            info_text, figs = agent.visualizer.create_dashboard_overview()
            
            st.markdown(info_text)
            
            # Exibir gr√°ficos
            for i, fig in enumerate(figs):
                if fig:
                    st.plotly_chart(fig, use_container_width=True, key=f"dashboard_chart_{i}")
                    
                    # Limitar n√∫mero de gr√°ficos para n√£o sobrecarregar
                    if i >= 3:
                        break
    
    except Exception as e:
        st.error(f"Erro ao gerar visualiza√ß√µes: {str(e)}")

def handle_user_question(agent, question):
    """Processa pergunta do usu√°rio"""
    try:
        # Verificar cache de visualiza√ß√µes
        question_hash = hash(question.lower().strip())
        if question_hash in st.session_state.visualization_cache:
            response, visualization = st.session_state.visualization_cache[question_hash]
            st.info("üìã Resposta recuperada do cache (mais r√°pido!)")
        else:
            with st.spinner("Analisando sua pergunta..."):
                response, visualization = agent.ask_question(question)
                # Salvar no cache
                st.session_state.visualization_cache[question_hash] = (response, visualization)
        
        # Exibir resposta
        st.markdown("**Resposta:**")
        st.write(response)
        
        # Exibir visualiza√ß√£o se dispon√≠vel
        if visualization:
            st.markdown("**Visualiza√ß√£o:**")
            import time
            st.plotly_chart(visualization, use_container_width=True, key=f"question_chart_{int(time.time() * 1000)}")
        else:
            st.info("‚ÑπÔ∏è Nenhuma visualiza√ß√£o foi gerada para esta pergunta.")
        
        # Adicionar ao hist√≥rico
        st.session_state.analysis_history.append({
            'question': question,
            'response': response,
            'has_visualization': visualization is not None
        })
        
        return True
    
    except Exception as e:
        st.error(f"Erro ao processar pergunta: {str(e)}")
        st.error(f"Detalhes: {traceback.format_exc()}")
        return False

def display_conclusions(agent):
    """Exibe conclus√µes do agente"""
    st.markdown('<div class="section-header">üí° Conclus√µes do Agente</div>', unsafe_allow_html=True)
    
    try:
        conclusions = agent.generate_conclusions()
        
        if conclusions:
            for i, conclusion in enumerate(conclusions, 1):
                st.markdown(f'<div class="conclusion-box"><strong>Conclus√£o {i}:</strong> {conclusion}</div>', 
                          unsafe_allow_html=True)
        else:
            st.info("Fa√ßa algumas perguntas para que o agente possa gerar conclus√µes baseadas nas an√°lises.")
    
    except Exception as e:
        st.error(f"Erro ao gerar conclus√µes: {str(e)}")

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    initialize_session_state()
    
    # Header
    st.markdown('<div class="main-header">ü§ñ Agente Inteligente de An√°lise CSV</div>', unsafe_allow_html=True)
    st.markdown("---")
    
    # Sidebar para configura√ß√µes
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        
        # Upload de arquivo
        st.subheader("üìÅ Upload de Arquivo")
        uploaded_file = st.file_uploader(
            "Escolha um arquivo CSV",
            type=['csv'],
            help="Fa√ßa upload de um arquivo CSV para an√°lise"
        )
        
        # Configura√ß√£o da API
        st.subheader("üîë Configura√ß√£o da API")
        api_key = st.text_input(
            "OpenAI API Key",
            type="password",
            help="Insira sua chave da API OpenAI"
        )
        
        if st.button("üîÑ Reiniciar Sess√£o"):
            st.session_state.clear()
            st.rerun()
    
    # Verificar se API key est√° configurada
    effective_api_key = api_key or os.getenv("OPENAI_API_KEY")
    
    # Validar se a API key tem formato v√°lido (come√ßa com sk-)
    def is_valid_key(key):
        return key and key.startswith("sk-") and len(key) > 20
    
    # Configurar agente com API key ou modo demonstra√ß√£o (apenas se n√£o existir)
    if st.session_state.agent is None:
        if effective_api_key and is_valid_key(effective_api_key):
            try:
                st.session_state.agent = CSVAgent(api_key=effective_api_key)
                st.success("‚úÖ API Key configurada com sucesso!")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erro ao conectar com OpenAI: {str(e)}")
                st.info("üéØ Ativando modo de demonstra√ß√£o...")
                st.session_state.agent = CSVAgent(demo_mode=True)
        else:
            if effective_api_key:
                st.warning("‚ö†Ô∏è API Key inv√°lida. Ativando modo de demonstra√ß√£o...")
            else:
                st.info("‚ÑπÔ∏è API Key n√£o configurada. Ativando modo de demonstra√ß√£o...")
            st.session_state.agent = CSVAgent(demo_mode=True)
    
    # Processar upload de arquivo (apenas se for um arquivo novo)
    if uploaded_file is not None:
        # Verificar se √© um arquivo novo
        current_file_info = f"{uploaded_file.name}_{uploaded_file.size}"
        if 'current_file_info' not in st.session_state or st.session_state.current_file_info != current_file_info:
            st.info(f"üìÅ Arquivo detectado: {uploaded_file.name}")
            df = load_csv_file(uploaded_file)
            
            if df is not None:
                st.success(f"‚úÖ CSV carregado com sucesso! Shape: {df.shape}")
                st.session_state.df = df
                st.session_state.current_file_info = current_file_info
                
                # Carregar dados no agente se j√° inicializado
                if st.session_state.agent is not None:
                    try:
                        with st.spinner("Carregando dados no agente..."):
                            st.session_state.agent.load_csv(df=df)
                            st.success("‚úÖ Dados carregados no agente com sucesso!")
                    except Exception as e:
                        st.error(f"Erro ao carregar dados no agente: {str(e)}")
                        st.error(f"Detalhes: {traceback.format_exc()}")
            else:
                st.error("‚ùå Erro ao carregar o arquivo CSV")
    
    # Interface principal
    if st.session_state.df is not None:
        
        # Tabs para organizar conte√∫do
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìã Vis√£o Geral", 
            "üîç An√°lise Autom√°tica", 
            "üìä Visualiza√ß√µes", 
            "‚ùì Perguntas", 
            "üí° Conclus√µes"
        ])
        
        with tab1:
            display_dataset_overview(st.session_state.df)
        
        with tab2:
            if st.session_state.agent is not None:
                display_automatic_analysis(st.session_state.agent)
            else:
                st.warning("‚ö†Ô∏è Funcionalidade requer agente inicializado com API key v√°lida")
        
        with tab3:
            if st.session_state.agent is not None:
                display_visualizations(st.session_state.agent)
            else:
                st.warning("‚ö†Ô∏è Funcionalidade requer agente inicializado com API key v√°lida")
        
        with tab4:
            st.markdown('<div class="section-header">‚ùì Fa√ßa Perguntas sobre os Dados</div>', unsafe_allow_html=True)
            
            if st.session_state.agent is not None:
                # Exemplos de perguntas
                st.markdown("**Exemplos de perguntas que voc√™ pode fazer:**")
                examples = [
                    "Qual a distribui√ß√£o da vari√°vel Class?",
                    "Existem correla√ß√µes fortes entre as vari√°veis?",
                    "Quais s√£o os outliers na coluna Amount?",
                    "Qual a m√©dia e mediana de cada vari√°vel num√©rica?",
                    "Existem padr√µes temporais nos dados?",
                    "Quais s√£o as principais caracter√≠sticas do dataset?"
                ]
                
                for example in examples:
                    if st.button(f"üí° {example}", key=f"example_{hash(example)}"):
                        handle_user_question(st.session_state.agent, example)
                
                st.markdown("---")
                
                # Input para pergunta personalizada
                user_question = st.text_input(
                    "Sua pergunta:",
                    placeholder="Digite sua pergunta sobre os dados...",
                    key="user_question"
                )
                
                if st.button("üöÄ Analisar", type="primary"):
                    if user_question:
                        handle_user_question(st.session_state.agent, user_question)
                    else:
                        st.warning("Por favor, digite uma pergunta.")
                
                # Hist√≥rico de perguntas
                if st.session_state.analysis_history:
                    st.markdown("---")
                    st.markdown("**üìö Hist√≥rico de An√°lises:**")
                    
                    for i, item in enumerate(reversed(st.session_state.analysis_history[-5:]), 1):
                        with st.expander(f"Pergunta {len(st.session_state.analysis_history) - i + 1}: {item['question'][:50]}..."):
                            st.write(f"**Pergunta:** {item['question']}")
                            st.write(f"**Resposta:** {item['response']}")
                            if item['has_visualization']:
                                st.write("üìä *Visualiza√ß√£o gerada*")
            else:
                st.warning("‚ö†Ô∏è Funcionalidade requer agente inicializado com API key v√°lida")
                st.info("Configure uma API key v√°lida da OpenAI para usar as funcionalidades de IA")
        
        with tab5:
            if st.session_state.agent is not None:
                display_conclusions(st.session_state.agent)
            else:
                st.warning("‚ö†Ô∏è Funcionalidade requer agente inicializado com API key v√°lida")
    
    else:
        # Tela inicial
        st.markdown("""
        ## üöÄ Bem-vindo ao Agente de An√°lise CSV!
        
        Este agente inteligente pode analisar qualquer arquivo CSV e responder perguntas sobre seus dados.
        
        ### üéØ Funcionalidades:
        - **An√°lise Explorat√≥ria Autom√°tica**: Estat√≠sticas, distribui√ß√µes, correla√ß√µes
        - **Detec√ß√£o de Outliers**: Identifica√ß√£o de valores at√≠picos
        - **Visualiza√ß√µes Interativas**: Gr√°ficos autom√°ticos baseados nas perguntas
        - **Processamento de Linguagem Natural**: Fa√ßa perguntas em portugu√™s
        - **Sistema de Mem√≥ria**: O agente lembra das an√°lises anteriores
        - **Gera√ß√£o de Insights**: Conclus√µes autom√°ticas sobre os dados
        
        ### üìù Como usar:
        1. Configure sua OpenAI API Key na barra lateral
        2. Fa√ßa upload de um arquivo CSV
        3. Explore as an√°lises autom√°ticas
        4. Fa√ßa perguntas sobre os dados
        5. Veja as conclus√µes geradas pelo agente
        
        ### üîß Configura√ß√£o:
        - Crie um arquivo `.env` com sua `OPENAI_API_KEY`
        - Ou insira a chave diretamente na barra lateral
        """)

if __name__ == "__main__":
    main()